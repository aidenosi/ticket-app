{"version":3,"sources":["Ticket.js","App.js","serviceWorker.js","index.js"],"names":["Ticket","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","handlecategoryChange","e","setState","ticketCategory","target","value","handleInputChange","_this$setState","name","self","assertThisInitialized","removeFromArray","changedValues","state","filter","field","includes","defineProperty","email","phone","extension","summary","status","type","priority","category","subcategory","console","error","concat","toConsumableArray","handleCancel","length","onCancel","window","confirm","handleToggleHistory","preventDefault","showHistory","ID","id","contactName","contactEmail","contactPhone","contactExtension","ticketSummary","ticketStatus","ticketType","ticketPriority","ticketSubcategory","ticketNewDetailedInfo","ticketDetailedInfo","details","ticketHistory","history","categoriesAndSubcategories","subcategories","noChangesMade","list","_this2","pastDetailsAndShowHistoryButton","react_default","a","createElement","Fragment","className","htmlFor","rows","disabled","onClick","ticketHistoryBox","onSubmit","placeholder","onChange","required","style","display","bind","map","i","key","Component","App","showModal","newTicket","allTickets","requestedTicket","componentDidMount","getAllTickets","document","title","fetch","then","res","json","handleNewTicket","handleViewTicket","response","handleSubmit","d","Date","detailsWithTimestamp","getDate","slice","getMonth","getFullYear","join","getHours","getMinutes","getSeconds","method","mode","headers","Accept","Content-Type","body","JSON","stringify","alert","handleEdit","changedValue","oldValue","newValue","dformat","changes","ticketList","ticket","textAlign","src_Ticket","rel","href","integrity","crossOrigin","data-toggle","data-search","width","tableLayout","textOverflow","data-field","data-sortable","Modal_default","size","show","onHide","src","isLocalhost","Boolean","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","controller","log","onUpdate","onSuccess","catch","ReactDOM","render","src_App_0","getElementById","URL","process","origin","addEventListener","contentType","get","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.7bf7924f.chunk.js","sourcesContent":["import React, { Component } from \"react\";\nimport \"./App.css\";\n\nclass Ticket extends Component {\n  // Component is fully uncontrolled with key - state is declared by props but is updated separately\n  constructor(props) {\n    super(props);\n    this.state = {\n      ID: this.props.id,\n      contactName: this.props.name,\n      contactEmail: this.props.email,\n      contactPhone: this.props.phone,\n      contactExtension: this.props.extension,\n      ticketSummary: this.props.summary,\n      ticketStatus: this.props.status,\n      ticketType: this.props.type,\n      ticketPriority: this.props.priority,\n      ticketCategory: this.props.category,\n      ticketSubcategory: this.props.subcategory,\n      ticketNewDetailedInfo: \"\",\n      ticketDetailedInfo: this.props.details,\n      ticketHistory: this.props.history,\n      // Array to hold subcategories based on currently selected category\n      categoriesAndSubcategories: [\n        {\n          category: \"Hardware\",\n          subcategories: [\"Laptop\", \"Desktop\", \"Peripheral/accessory\", \"Other\"]\n        },\n        {\n          category: \"Software\",\n          subcategories: [\"MS Office\", \"MS Outlook\", \"Web browser\", \"Other\"]\n        },\n        { category: \"Other\", subcategories: [\"Other\"] }\n      ],\n      noChangesMade: true, // Flag for checking whether changes have been made\n      changedValues: [], // Array to store names of fields whose values have changed\n      showHistory: false\n    };\n  }\n\n  /**\n   * Handler for when catagory is changed so that subcategories update accordingly.\n   */\n  handlecategoryChange = e => {\n    this.setState({ ticketCategory: e.target.value });\n  };\n\n  /**\n   * Handler for when an input is changed. Also checks to see if \"changed\" values are actually different from the value of the property.\n   */\n  handleInputChange = e => {\n    const target = e.target;\n    const value = target.value;\n    const name = target.name;\n\n    var self = this; // Makeshift binding for inner function\n    // Inner function to remove a field from the array of changed values if the value is reverted back to the value of the property\n    function removeFromArray(name) {\n      self.setState({\n        changedValues: self.state.changedValues.filter(field => field !== name)\n      });\n    }\n\n    // If field's value hasn't been changed yet\n    if (!this.state.changedValues.includes(name)) {\n      this.setState({\n        [name]: value,\n        changedValues: [...this.state.changedValues, name]\n      });\n    } else {\n      // Apply value change\n      this.setState({ [name]: value });\n      // Switch statement to match form field to the right property\n      switch (name) {\n        case \"contactName\":\n          if (value === this.props.name) {\n            removeFromArray(name);\n          }\n          break;\n        case \"contactEmail\":\n          if (value === this.props.email) {\n            removeFromArray(name);\n          }\n          break;\n        case \"contactPhone\":\n          if (value === this.props.phone) {\n            removeFromArray(name);\n          }\n          break;\n        case \"contactExtension\":\n          if (value === this.props.extension) {\n            removeFromArray(name);\n          }\n          break;\n        case \"ticketSummary\":\n          if (value === this.props.summary) {\n            removeFromArray(name);\n          }\n          break;\n        case \"ticketStatus\":\n          if (value === this.props.status) {\n            removeFromArray(name);\n          }\n          break;\n        case \"ticketType\":\n          if (value === this.props.type) {\n            removeFromArray(name);\n          }\n          break;\n        case \"ticketPriority\":\n          if (value === this.props.priority) {\n            removeFromArray(name);\n          }\n          break;\n        case \"ticketCategory\":\n          if (value === this.props.category) {\n            removeFromArray(name);\n          }\n          break;\n        case \"ticketSubcategory\":\n          if (value === this.props.subcategory) {\n            removeFromArray(name);\n          }\n          break;\n        case \"ticketNewDetailedInfo\":\n          if (value === \"\") {\n            removeFromArray(name);\n          }\n          break;\n        default:\n          console.error(\"No field found with name \" + name);\n          break;\n      }\n    }\n  };\n\n  /**\n   * Handler for when cancel button is pressed. Confirms with user that they wish to\n   * discard changes if changes have been made.\n   */\n  handleCancel = () => {\n    if (this.state.changedValues.length === 0) {\n      this.props.onCancel();\n    } else {\n      if (window.confirm(\"Do you wish to discard changes?\"))\n        this.props.onCancel();\n    }\n  };\n\n  handleToggleHistory = e => {\n    e.preventDefault();\n    this.setState({ showHistory: !this.state.showHistory });\n  };\n\n  render() {\n    let list; // Used to populate options for subcategory\n    //Only show previous details if there are any. New tickets will not have the text box.\n    const pastDetailsAndShowHistoryButton =\n      this.state.ticketDetailedInfo !== \"\" ? (\n        <React.Fragment>\n          <div className=\"form-row mb-1\">\n            <div className=\"form-group col-12\">\n              <label htmlFor=\"ticketDetailedInfo\">Past Detailed Info</label>\n              <textarea\n                className=\"form-control\"\n                name=\"ticketDetailedInfo\"\n                rows=\"5\"\n                value={this.state.ticketDetailedInfo}\n                disabled\n              />\n            </div>\n          </div>\n          <div className=\"form-row mb-2\">\n            <div className=\"form-group col-12\">\n              <button\n                className=\"btn btn-secondary\"\n                value={this.state.ticketDetailedInfo}\n                onClick={this.handleToggleHistory}\n              >\n                Toggle ticket history\n              </button>\n            </div>\n          </div>\n        </React.Fragment>\n      ) : null;\n    const ticketHistoryBox = this.state.showHistory ? (\n      <div className=\"form-row mb-1\">\n        <div className=\"form-group col-12\">\n          <textarea\n            className=\"form-control\"\n            name=\"ticketHistoryBox\"\n            rows=\"5\"\n            value={this.state.ticketHistory}\n            disabled\n          />\n        </div>\n      </div>\n    ) : null;\n    if (\n      // If category is default or undefined...\n      this.state.ticketCategory === \"Select category\" ||\n      typeof this.state.ticketCategory === \"undefined\"\n    ) {\n      // ...list contains no subcategories\n      list = [{ category: \"Select category\", subcategories: [] }];\n    } else {\n      // Else list will contain the subcategories corresponding to the selected category\n      list = this.state.categoriesAndSubcategories.filter(list => {\n        return list.category === this.state.ticketCategory;\n      });\n    }\n    return (\n      <React.Fragment>\n        <main className=\"container bg-light pb-2 pt-2\">\n          <h1>\n            {/* Display ticket ID number if not new ticket */}\n            {this.state.ID === \"\" ? \"New Ticket\" : \"Ticket #\" + this.state.ID}\n          </h1>\n          <hr />\n          <h3 className=\"mt-3\">Contact Information</h3>\n          {/* Use cancel handler if no changes have been made - no point in submitting unchanged data */}\n          <form\n            onSubmit={\n              this.state.changedValues.length === 0\n                ? this.props.onCancel\n                : this.props.onSubmit\n            }\n            onCancel={this.handleCancel}\n            id={this.state.ID}\n          >\n            <div className=\"form-row align-items-center mt-3\">\n              <div className=\"form-group col mr-1\">\n                <label htmlFor=\"contactName\">Name *</label>\n                <input\n                  type=\"name\"\n                  className=\"form-control\"\n                  name=\"contactName\"\n                  placeholder=\"First Last\"\n                  value={this.state.contactName}\n                  onChange={this.handleInputChange}\n                  required\n                />\n              </div>\n              <div className=\"form-group col ml-1 mr-1\">\n                <label htmlFor=\"contactEmail\">Email *</label>\n                <input\n                  type=\"email\"\n                  className=\"form-control\"\n                  name=\"contactEmail\"\n                  placeholder=\"someone@site.com\"\n                  value={this.state.contactEmail}\n                  onChange={this.handleInputChange}\n                  required\n                />\n              </div>\n              <div className=\"form-group col ml-1 mr-1\">\n                <label htmlFor=\"contactPhone\">Phone number</label>\n                {/* Check if value is null, set value to empty string, otherwise use state value */}\n                <input\n                  type=\"tel\"\n                  className=\"form-control\"\n                  name=\"contactPhone\"\n                  placeholder=\"123-456-7880\"\n                  value={\n                    this.state.contactPhone === null\n                      ? \"\"\n                      : this.state.contactPhone\n                  }\n                  onChange={this.handleInputChange}\n                />\n              </div>\n              <div className=\"form-group col ml-1\">\n                <label htmlFor=\"contactExtension\">Extension</label>\n                {/* Check if value is null, set value to empty string, otherwise use state value */}\n                <input\n                  type=\"text\"\n                  className=\"form-control\"\n                  name=\"contactExtension\"\n                  placeholder=\"1234\"\n                  value={\n                    this.state.contactExtension === null\n                      ? \"\"\n                      : this.state.contactExtension\n                  }\n                  onChange={this.handleInputChange}\n                />\n              </div>\n            </div>\n            <div className=\"form-row mb-5\" />\n            <h3>Ticket Information</h3>\n            <div className=\"form-row mt-3 mb-5\">\n              <div className=\"form-group col-9\">\n                <label htmlFor=\"ticketSummary\">Summary *</label>\n                <input\n                  type=\"text\"\n                  className=\"form-control\"\n                  name=\"ticketSummary\"\n                  value={this.state.ticketSummary}\n                  onChange={this.handleInputChange}\n                  required\n                />\n              </div>\n              <div className=\"form-group col ml-2\">\n                <label htmlFor=\"ticketStatus\">Status *</label>\n                <select\n                  className=\"form-control\"\n                  name=\"ticketStatus\"\n                  value={this.state.ticketStatus}\n                  onChange={this.handleInputChange}\n                  required\n                >\n                  <option style={{ display: \"none\" }} value=\"\">\n                    Select status\n                  </option>\n                  <option value=\"Open\">Open</option>\n                  <option value=\"In progress\">In progress</option>\n                  <option value=\"On hold\">On hold</option>\n                  <option value=\"Closed\">Closed</option>\n                </select>\n              </div>\n            </div>\n            <div className=\"form-row mb-5\">\n              <div className=\"form-group col mr-1\">\n                <label htmlFor=\"ticketType\">Ticket type *</label>\n                <select\n                  className=\"form-control\"\n                  name=\"ticketType\"\n                  value={this.state.ticketType}\n                  onChange={this.handleInputChange}\n                  required\n                >\n                  <option style={{ display: \"none\" }} value=\"\">\n                    Select type\n                  </option>\n                  <option value=\"Request\">Request</option>\n                  <option value=\"Incident\">Incident</option>\n                  <option value=\"Task\">Task</option>\n                </select>\n              </div>\n              <div className=\"form-group col ml-1 mr-1\">\n                <label htmlFor=\"ticketPriority\">Priority *</label>\n                <select\n                  className=\"form-control\"\n                  name=\"ticketPriority\"\n                  value={this.state.ticketPriority}\n                  onChange={this.handleInputChange}\n                  required\n                >\n                  <option style={{ display: \"none\" }} value=\"\">\n                    Select priority\n                  </option>\n                  <option value=\"High\">High</option>\n                  <option value=\"Medium\">Medium</option>\n                  <option value=\"Low\">Low</option>\n                </select>\n              </div>\n              <div className=\"form-group col ml-1 mr-1\">\n                <label htmlFor=\"ticketCategory\">Category *</label>\n                <select\n                  className=\"form-control\"\n                  name=\"ticketCategory\"\n                  value={this.state.ticketCategory}\n                  onChange={this.handlecategoryChange.bind(this)}\n                  required\n                >\n                  <option style={{ display: \"none\" }} value=\"\">\n                    Select category\n                  </option>\n                  {/* Map each category to an <option> */}\n                  {this.state.categoriesAndSubcategories.map((list, i) => {\n                    return <option key={i}>{list.category}</option>;\n                  })}\n                </select>\n              </div>\n              <div className=\"form-group col ml-1\">\n                <label htmlFor=\"ticketSubcategory\">Subcategory *</label>\n                <select\n                  className=\"form-control\"\n                  name=\"ticketSubcategory\"\n                  value={this.state.ticketSubcategory}\n                  onChange={this.handleInputChange}\n                  required\n                >\n                  <option style={{ display: \"none\" }} value=\"\">\n                    Select subcategory\n                  </option>\n                  {/* Map each subcategory corresponding to the current category to an <option> */}\n                  {list[0].subcategories.map((subcategory, i) => {\n                    return <option key={i}>{subcategory}</option>;\n                  })}\n                </select>\n              </div>\n            </div>\n            <div className=\"form-row mb-5\">\n              <div className=\"form-group col-12\">\n                <label htmlFor=\"ticketNewDetailedInfo\">Detailed Info *</label>\n                <textarea\n                  className=\"form-control\"\n                  name=\"ticketNewDetailedInfo\"\n                  rows=\"5\"\n                  value={this.state.ticketNewDetailedInfo}\n                  onChange={this.handleInputChange}\n                  required\n                />\n              </div>\n            </div>\n            {pastDetailsAndShowHistoryButton}\n            {ticketHistoryBox}\n            <div className=\"form-row mb-2\">\n              <div className=\"col\">\n                <button type=\"submit\" className=\"btn btn-primary\" id=\"submit\">\n                  Submit\n                </button>\n              </div>\n              <button\n                type=\"button\"\n                className=\"btn btn-danger\"\n                id=\"cancel\"\n                onClick={this.handleCancel}\n              >\n                Cancel\n              </button>\n            </div>\n          </form>\n        </main>\n      </React.Fragment>\n    );\n  }\n}\n\nexport default Ticket;\n","import React, { Component } from \"react\";\r\nimport Ticket from \"./Ticket.js\";\r\nimport Modal from \"react-bootstrap/Modal\";\r\n\r\n/*\r\n------------ TO DO ------------\r\n  - Sort table view\r\n  - Search for tickets\r\n  - Find a better/more efficient way to handle displaying tickets (instead of ternary operator)\r\n  - Fix 'JSON.parse: unexpected character' error when submitting changes\r\n\r\n------------ DONE ------------\r\n  - Add timestamp to details\r\n  - Fix table columns resizing\r\n  - Use modal for ticket instead of just displaying over site\r\n  - Show previous details in uneditable text box, merge new changes upon submitting\r\n  - Fix issue where tickets don't show new details after Submitting then re-opening (have to re-open, cancel, then open again)\r\n  - Find a solution to the issue where the main screen doesn't update after editing ticket \r\n    -Fixed by giving user prompt which allows React time to update state\r\n  - Ticket now actually checks to see if changes have been made (ie new value is different than value passed in)\r\n  - Add new uneditable field for history of ticket (changes to category, type, status, etc)\r\n    - Don't update details unless new information is added\r\n*/\r\n\r\nclass App extends Component {\r\n  state = {\r\n    showModal: false, // Use to determine when to display modal ticket component\r\n    newTicket: false, // Used to determine whether data needs to be filled\r\n    allTickets: \"\", // Array of all tickets\r\n    requestedTicket: \"\" // The last ticket requested to view\r\n  };\r\n\r\n  /**\r\n   * Populate state with tickets and set document title upon loading.\r\n   */\r\n  componentDidMount = () => {\r\n    this.getAllTickets();\r\n    document.title = \"PickIt\";\r\n  };\r\n\r\n  /**\r\n   * Queries a fetch request for all tickets and updates state list.\r\n   */\r\n  getAllTickets = () => {\r\n    fetch(\"http://localhost:3001/tickets\")\r\n      .then(res => res.json())\r\n      .then(res => this.setState({ allTickets: res }));\r\n  };\r\n\r\n  /**\r\n   * Handler for new ticket. Displays ticket with no data filled.\r\n   */\r\n  handleNewTicket = () => {\r\n    this.setState({ showModal: true, newTicket: true });\r\n  };\r\n\r\n  /**\r\n   * Handler for opening a ticket. Queries a fetch request for a ticket by ID number.\r\n   */\r\n  handleViewTicket = e => {\r\n    let id = e.target.id;\r\n    fetch(\"http://localhost:3001/tickets/\" + id)\r\n      .then(response => response.json())\r\n      .then(response => this.setState({ requestedTicket: response[0] }));\r\n    this.setState({ showModal: true, newTicket: false }); // Show ticket, fill data\r\n  };\r\n\r\n  /**\r\n   * Handler for submit button. Queries a POST request to send form data to Postgres DB\r\n   * to submit a new ticket.\r\n   */\r\n  handleSubmit = e => {\r\n    e.preventDefault();\r\n    // If user confirms submission\r\n    if (window.confirm(\"Submit ticket?\")) {\r\n      // Write timestamp for when ticket was submitted to details\r\n      var d = new Date(),\r\n        dformat =\r\n          [\r\n            (\"00\" + d.getDate()).slice(-2),\r\n            (\"00\" + (d.getMonth() + 1)).slice(-2),\r\n            d.getFullYear()\r\n          ].join(\"/\") +\r\n          \" at \" +\r\n          [\r\n            (\"00\" + d.getHours()).slice(-2),\r\n            (\"00\" + d.getMinutes()).slice(-2),\r\n            (\"00\" + d.getSeconds()).slice(-2)\r\n          ].join(\":\");\r\n      const detailsWithTimestamp =\r\n        \"\\r\\n__________________________________________\\r\\n\" +\r\n        \"Submitted on: \" +\r\n        dformat +\r\n        \":\\r\\n\" +\r\n        e.target.ticketNewDetailedInfo.value;\r\n      fetch(\"http://localhost:3001/tickets\", {\r\n        method: \"post\",\r\n        mode: \"cors\",\r\n        headers: {\r\n          Accept: \"application/json\",\r\n          \"Content-Type\": \"application/json\"\r\n        },\r\n        body: JSON.stringify({\r\n          name: e.target.contactName.value,\r\n          email: e.target.contactEmail.value,\r\n          phone: e.target.contactPhone.value,\r\n          extension: e.target.contactExtension.value,\r\n          summary: e.target.ticketSummary.value,\r\n          status: e.target.ticketStatus.value,\r\n          type: e.target.ticketType.value,\r\n          priority: e.target.ticketPriority.value,\r\n          category: e.target.ticketCategory.value,\r\n          subcategory: e.target.ticketSubcategory.value,\r\n          details: detailsWithTimestamp,\r\n          history: \"\"\r\n        })\r\n      });\r\n      window.alert(\"Ticket has been submitted.\"); // Alert user that ticket submitted\r\n      this.setState(\r\n        { newTicket: false, showModal: false },\r\n        this.getAllTickets()\r\n      ); // Hide ticket\r\n    }\r\n  };\r\n\r\n  /**\r\n   * Handler for edit button. Queries a PUT request to send form data to Postgres DB\r\n   * to update a ticket.\r\n   */\r\n  handleEdit = e => {\r\n    let id = e.target.id;\r\n    // If user confirms submission\r\n    if (window.confirm(\"Submit changes to ticket #\" + id + \"?\")) {\r\n      e.preventDefault();\r\n      // Write timestamp for when changes were made in details.\r\n      var d = new Date(),\r\n        dformat =\r\n          [\r\n            (\"00\" + d.getDate()).slice(-2),\r\n            (\"00\" + (d.getMonth() + 1)).slice(-2),\r\n            d.getFullYear()\r\n          ].join(\"/\") +\r\n          \" at \" +\r\n          [\r\n            (\"00\" + d.getHours()).slice(-2),\r\n            (\"00\" + d.getMinutes()).slice(-2),\r\n            (\"00\" + d.getSeconds()).slice(-2)\r\n          ].join(\":\");\r\n      const detailsWithTimestamp =\r\n        \"\\r\\n__________________________________________\\r\\n\" +\r\n        \"Edited on: \" +\r\n        dformat +\r\n        \":\\r\\n\" +\r\n        e.target.ticketNewDetailedInfo.value +\r\n        e.target.ticketDetailedInfo.value;\r\n\r\n      var changes = dformat + \":\\r\\n\"; // Timestamp for changes\r\n      // Inner function to add line for any changes made\r\n      function changedValue(field, oldValue, newValue) {\r\n        return field === \"Details\"\r\n          ? \"Ticket details updated.\\r\\n\"\r\n          : '\"' +\r\n              field +\r\n              '\" changed from \"' +\r\n              oldValue +\r\n              '\" to \"' +\r\n              newValue +\r\n              '\"\\r\\n';\r\n      }\r\n      // This series of if statements detect if changes have been made, and if so, calls inner function to write these changes\r\n      if (e.target.contactName.value !== this.state.requestedTicket.name) {\r\n        changes += changedValue(\r\n          \"Name\",\r\n          this.state.requestedTicket.name,\r\n          e.target.contactName.value\r\n        );\r\n      }\r\n      if (e.target.contactEmail.value !== this.state.requestedTicket.email) {\r\n        changes += changedValue(\r\n          \"Email\",\r\n          this.state.requestedTicket.email,\r\n          e.target.contactEmail.value\r\n        );\r\n      }\r\n      if (e.target.contactPhone.value !== this.state.requestedTicket.phone) {\r\n        if (\r\n          e.target.contactPhone.value === \"\" &&\r\n          this.state.requestedTicket.phone !== null\r\n        ) {\r\n          changes += changedValue(\r\n            \"Phone\",\r\n            this.state.requestedTicket.phone,\r\n            e.target.contactPhone.value\r\n          );\r\n        }\r\n      }\r\n      if (\r\n        e.target.contactExtension.value !== this.state.requestedTicket.extension\r\n      ) {\r\n        if (\r\n          e.target.contactExtension.value === \"\" &&\r\n          this.state.requestedTicket.extension !== null\r\n        ) {\r\n          changes += changedValue(\r\n            \"Extension\",\r\n            this.state.requestedTicket.extension,\r\n            e.target.contactExtension.value\r\n          );\r\n        }\r\n      }\r\n      if (e.target.ticketSummary.value !== this.state.requestedTicket.summary) {\r\n        changes += changedValue(\r\n          \"Summary\",\r\n          this.state.requestedTicket.summary,\r\n          e.target.ticketSummary.value\r\n        );\r\n      }\r\n      if (e.target.ticketStatus.value !== this.state.requestedTicket.status) {\r\n        changes += changedValue(\r\n          \"Status\",\r\n          this.state.requestedTicket.status,\r\n          e.target.ticketStatus.value\r\n        );\r\n      }\r\n      if (e.target.ticketType.value !== this.state.requestedTicket.type) {\r\n        changes += changedValue(\r\n          \"Type\",\r\n          this.state.requestedTicket.type,\r\n          e.target.ticketType.value\r\n        );\r\n      }\r\n      if (\r\n        e.target.ticketPriority.value !== this.state.requestedTicket.priority\r\n      ) {\r\n        changes += changedValue(\r\n          \"Priority\",\r\n          this.state.requestedTicket.priority,\r\n          e.target.ticketPriority.value\r\n        );\r\n      }\r\n      if (\r\n        e.target.ticketCategory.value !== this.state.requestedTicket.category\r\n      ) {\r\n        changes += changedValue(\r\n          \"Category\",\r\n          this.state.requestedTicket.category,\r\n          e.target.ticketCategory.value\r\n        );\r\n      }\r\n      if (\r\n        e.target.ticketSubcategory.value !==\r\n        this.state.requestedTicket.subcategory\r\n      ) {\r\n        changes += changedValue(\r\n          \"Subcategory\",\r\n          this.state.requestedTicket.subcategory,\r\n          e.target.ticketSubcategory.value\r\n        );\r\n      }\r\n      if (\r\n        e.target.ticketDetailedInfo.value !== this.state.requestedTicket.details\r\n      ) {\r\n        changes += changedValue(\r\n          \"Details\",\r\n          this.state.requestedTicket.details,\r\n          e.target.ticketDetailedInfo.value\r\n        );\r\n      }\r\n\r\n      changes += \"\\r\\n\" + this.state.requestedTicket.history;\r\n      fetch(\"http://localhost:3001/tickets/\" + id, {\r\n        method: \"put\",\r\n        mode: \"cors\",\r\n        headers: {\r\n          Accept: \"application/json\",\r\n          \"Content-Type\": \"application/json\"\r\n        },\r\n        body: JSON.stringify({\r\n          name: e.target.contactName.value,\r\n          email: e.target.contactEmail.value,\r\n          phone: e.target.contactPhone.value,\r\n          extension: e.target.contactExtension.value,\r\n          summary: e.target.ticketSummary.value,\r\n          status: e.target.ticketStatus.value,\r\n          type: e.target.ticketType.value,\r\n          priority: e.target.ticketPriority.value,\r\n          category: e.target.ticketCategory.value,\r\n          subcategory: e.target.ticketSubcategory.value,\r\n          details: detailsWithTimestamp,\r\n          history: changes\r\n        })\r\n      }).then(response => response.json());\r\n      window.alert(\"Changes have been submitted.\"); // Alert user that changes submitted\r\n      this.setState(\r\n        { newTicket: false, showModal: false, requestedTicket: \"\" },\r\n        this.getAllTickets()\r\n      );\r\n      // If user presses cancel, do nothing\r\n    } else {\r\n      e.preventDefault();\r\n    }\r\n  };\r\n\r\n  /**\r\n   * Handler for cancel button. Hides ticket from view after user confirms (function\r\n   * called from Ticket.js after confirmation).\r\n   */\r\n  handleCancel = () => {\r\n    this.setState({ showModal: false, newTicket: false, requestedTicket: \"\" });\r\n  };\r\n\r\n  render() {\r\n    let ticketList;\r\n    // If there are tickets...\r\n    if (this.state.allTickets !== \"\") {\r\n      let tickets = this.state.allTickets;\r\n      // ...map each ticket to a row with properties displayed\r\n      ticketList = tickets.map(ticket => (\r\n        <tr className=\"border-bottom\" key={ticket.id}>\r\n          <td>{ticket.id}</td>\r\n          <td>{ticket.summary}</td>\r\n          <td>{ticket.status}</td>\r\n          <td>{ticket.type}</td>\r\n          <td>{ticket.priority}</td>\r\n          <td>{ticket.category}</td>\r\n          <td>{ticket.subcategory}</td>\r\n          {/* View Button */}\r\n          <td style={{ textAlign: \"right\" }}>\r\n            <button\r\n              className=\"btn btn-sm btn-primary\"\r\n              onClick={this.handleViewTicket}\r\n              id={ticket.id}\r\n            >\r\n              View\r\n            </button>\r\n          </td>\r\n        </tr>\r\n      ));\r\n    }\r\n    // TODO - Find a better way of doing this!!\r\n    let ticket = this.state.showModal ? (\r\n      this.state.newTicket ? (\r\n        // New ticket - don't fill fields\r\n        <div id=\"_ticket\">\r\n          <Ticket\r\n            onSubmit={this.handleSubmit}\r\n            onCancel={this.handleCancel}\r\n            id=\"\"\r\n            name=\"\"\r\n            email=\"\"\r\n            phone=\"\"\r\n            extension=\"\"\r\n            summary=\"\"\r\n            status=\"\"\r\n            type=\"\"\r\n            priority=\"\"\r\n            category=\"Select category\"\r\n            subcategory=\"\"\r\n            details=\"\"\r\n            history=\"\"\r\n          />\r\n        </div>\r\n      ) : (\r\n        // Edit ticket - fill fields with data\r\n        <div id=\"_ticket\">\r\n          <Ticket\r\n            key={this.state.requestedTicket.id}\r\n            onSubmit={this.handleEdit}\r\n            onCancel={this.handleCancel}\r\n            id={this.state.requestedTicket.id}\r\n            name={this.state.requestedTicket.name}\r\n            email={this.state.requestedTicket.email}\r\n            phone={this.state.requestedTicket.phone}\r\n            extension={this.state.requestedTicket.extension}\r\n            summary={this.state.requestedTicket.summary}\r\n            status={this.state.requestedTicket.status}\r\n            type={this.state.requestedTicket.type}\r\n            priority={this.state.requestedTicket.priority}\r\n            category={this.state.requestedTicket.category}\r\n            subcategory={this.state.requestedTicket.subcategory}\r\n            details={this.state.requestedTicket.details}\r\n            history={this.state.requestedTicket.history}\r\n          />\r\n        </div>\r\n      )\r\n    ) : (\r\n      // Don't show ticket\r\n      \"\"\r\n    );\r\n    return (\r\n      <React.Fragment>\r\n        <link\r\n          rel=\"stylesheet\"\r\n          href=\"https://unpkg.com/bootstrap-table@1.15.3/dist/bootstrap-table.min.css\"\r\n        />\r\n        <link\r\n          rel=\"stylesheet\"\r\n          href=\"https://stackpath.bootstrapcdn.com/bootstrap/4.1.0/css/bootstrap.min.css\"\r\n          integrity=\"sha384-9gVQ4dYFwwWSjIDZnLEWnxCjeSWFphJiwGPXr1jddIhOegiu1FwO5qRGvFXOdJZ4\"\r\n          crossOrigin=\"anonymous\"\r\n        />\r\n        <link rel=\"stylesheet\" href=\"./App.css\" />\r\n        {/* Main container */}\r\n        <main className=\"container bg-light pb-2 pt-2\">\r\n          <div>\r\n            {/* Refresh and new ticket buttons */}\r\n            <button\r\n              className=\"btn btn-sm btn-secondary\"\r\n              onClick={this.getAllTickets}\r\n            >\r\n              Refresh tickets\r\n            </button>\r\n            <button\r\n              className=\"btn btn-sm btn-primary\"\r\n              onClick={this.handleNewTicket}\r\n            >\r\n              New ticket\r\n            </button>\r\n          </div>\r\n          <hr />\r\n          {/* List view of tickets */}\r\n          <h3>Tickets</h3>\r\n          <div className=\"container\">\r\n            <table\r\n              data-toggle=\"bootstrap-table\"\r\n              data-search=\"true\"\r\n              className=\"ticketsTable\"\r\n              style={{\r\n                width: \"100%\",\r\n                tableLayout: \"fixed\",\r\n                textOverflow: \"auto\"\r\n              }}\r\n            >\r\n              <thead>\r\n                <tr className=\"border-bottom border-dark\">\r\n                  <th data-field=\"id\" data-sortable=\"true\">\r\n                    ID\r\n                  </th>\r\n                  <th data-sortable=\"true\" data-field=\"summary\">\r\n                    Summary\r\n                  </th>\r\n                  <th data-sortable=\"true\" data-field=\"status\">\r\n                    Status\r\n                  </th>\r\n                  <th data-sortable=\"true\" data-field=\"type\">\r\n                    Type\r\n                  </th>\r\n                  <th data-sortable=\"true\" data-field=\"priority\">\r\n                    Priority\r\n                  </th>\r\n                  <th data-sortable=\"true\" data-field=\"category\">\r\n                    Category\r\n                  </th>\r\n                  <th data-sortable=\"true\" data-field=\"subcategory\">\r\n                    Subcategory\r\n                  </th>\r\n                </tr>\r\n              </thead>\r\n              <tbody>{ticketList}</tbody>\r\n            </table>\r\n          </div>\r\n          <Modal size=\"lg\" show={this.state.showModal} onHide={null}>\r\n            {ticket}\r\n          </Modal>\r\n        </main>\r\n        <script src=\"https://unpkg.com/bootstrap-table@1.15.3/dist/bootstrap-table.min.js\" />\r\n      </React.Fragment>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.register();\n"],"sourceRoot":""}